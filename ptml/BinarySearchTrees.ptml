<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
            Design and Analysis of Algorithms: Binary Search Trees
        </title>
    </head>

    <body>
<!--include menu.txt -->
        <h1>
            Design and Analysis of Algorithms: Binary Search Trees
        </h1>

            <div style="text-align:center">
                <p>
                <img
                 src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/200px-Binary_search_tree.svg.png">
                </p>
            </div>

        <details>
            <summary class="sum1">
                12.1 What is a binary search tree?
            </summary>


            <details>
                <summary class="sum2">
                    Binary Search Tree Property
                </summary>
                <p>
                    <i>
                    Let x be a node in a binary search tree. If y is a node in the
                    left subtree of x, then y.key &le; x.key. If y is a node in the
                    right subtree of x, then y.key &ge; x.key.
                    </i>
                </p>
    
                <figure>
                <img
                src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/300px-Binary_search_tree.svg.png">
                <em>(Tree 1)</em>
                </figure>
            </details>

            <details>
                <summary class="sum2">
                    Inorder Tree Walk
                </summary>

                <pre>
                <code>
                    Inorder-Tree-Walk(x)
                        if x != NIL
                            Inorder-Tree-Walk(x.left)
                            print x.key
                            Inorder-Tree-Walk(x.right)
                </code>
                </pre>
                <p>
                    Compare with:
                </p>
                <pre>
                <code>
                    Postorder-Tree-Walk(x)
                        if x != NIL
                            Postorder-Tree-Walk(x.left)
                            Postorder-Tree-Walk(x.right)
                            print x.key
                </code>
                </pre>

            </details>

        </details>

    
        <details>
            <summary class="sum1">
                12.2 Querying a binary search tree
            </summary>
            <p>
                Why do we pass in a node rather than the tree itself?
                <br>
                Note why CLRS pseudo-code for max and min contains mistake
                from practical point of view.
                <br>
                Library code versus application code.
                <br>
                Library must protect itself against both malicious and merely
                inept users. So, need to check for NIL input!
                <br>
                <br>
                Recursive versus loop: compare the two searches.
                <br>
                <br>
                All searching functions (search, minimum, maximum, predecessor,
                successor) run in <em>O(h)</em> time,
                where <em>h</em> is the height of the tree.
                <br>
            </p>

            <details>
                <summary class="sum2">
                    Search
                </summary>
                <p>
                    We search by starting with the root node.
                    If it's key is equal to the key for
                    which we are searching, we are done: that is the
                    key we want.
                    <br>
                    On the other hand, if we have a NIL node at hand,
                    we are also done, but have failed to find the key.
                    <br>
                    Finally, if neither is true, we check the key
                    at hand against the key sought for.
                    <ul>
                        <li>If k &lt; curr.key, recursively call
                            tree search on curr.left.
                        </li>
                        <li>Else recursively call tree search on curr.right.
                        </li>
                    </ul>
                </p>
                <figure>
                    <img
                    src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/200px-Binary_search_tree.svg.png">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                    <br>
                    <b>Example:</b>
                    <br>Let's search for 4 in the tree above.
                    <ul>
                        <li>4 &lt; 8; move left</li>
                        <li>4 &gt; 3; move right</li>
                        <li>4 &lt; 6; move left</li>
                        <li>Voila!</li>
                    </ul>
                </p>


                <details>
                <summary class="sum3">
                    Running time
                </summary>
                <p>
                    <b>Worst case:</b> &Theta;(n)
                    <br>
                    This occurs when the tree simply makes one long chain.
                    <br>
                    <br>
                    <b>Average case:</b> &Theta;(lg n)
                    <br>
                    That is because the expected height of a
                    randomly built binary search tree is O(lg n).
                </p>
                </details>
            </details>

            
            <details>
            <summary class="sum2">
                Minimum and maximum
            </summary>

            <p>
            To find the minimum, we simply walk down the left side of the tree.
            <br>
            To find the maximum, we simply walk down
            the right side of the tree.
            </p>
            </details>


            <details>
                <summary class="sum2">
                    Successor
                </summary>
                <figure>
                    <img
                    src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/200px-Binary_search_tree.svg.png">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                    Let's walk through successor for our tree above.
                    <br>
                    <br>
                    Imagine we are seeking the successor
                    of 3. The right tree of three is non-empty. So we simply
                    seek the minimum of that tree,
                    which is the leftmost node in the tree, in this case, 4.
                    <br>
                    <br>
                    On the other hand, take this tree, and start with node 10.
                </p>
                <figure>
                    <img 
                    src="graphics/BinTree1.png">
                    <figcaption>
                    Tree 2
                    </figcaption>
                </figure>
                <p>
                    <br>
                    10 has no right child, so its successor must lie further up
                    the tree. But it is the right hand node of its
                    parent, so its parent can't be it. However, at the
                    next move back a generation we move left... and
                    that's the successor!
                </p>
            </details>
        </details>

    
        <details>
            <summary class="sum1">
                12.3 Insertion and deletion
            </summary>

            <details>
            <summary class="sum2">
                Insert
            </summary>
            <p>
                Let's walk through insert for tree 1 above.
                <br>
                <br>
                We will insert 5. (When I say "Insert x," you should take that
                to be shorthand for "Insert a node with key x.")
                <ul>
                    <li>5 &lt; 8, so we move left.</li>
                    <li>5 &gt; 3, so we move right. </li>
                    <li>5 &lt; 6, so we move left.</li>
                    <li>5 &gt; 4, so we move right and insert. </li>
                </ul>
            </p>
            </details>

            <details>
            <summary class="sum2">
                Delete
            </summary>
            <p>
                Deletion is by far the most complicated coding of any of these
                functions. There are four cases (<i>z</i> is the node to delete):
            </p>
            <ol>
                <li><i>z</i> has no left child. (This handles two cases!)
                    <br>
                    <b>Action:</b> Replace <i>z</i> by its right child,
                    which might be
                    NIL.
                </li>
                <li><i>z</i> has only a left child.
                    <br>
                    <b>Action:</b> Replace <i>z</i> by its left child.
                </li>
                <li><i>z</i> has two children.
                    <br>
                    <b>Action:</b> Find <i>z</i>'s successor y, which lies in its
                    right sub-tree.
                    <ul class="nested">
                        <li>If <i>y</i> is <i>z</i>'s right child, replace
                            <i>z</i> by <i>y</i>.
                        </li>
                        <li>Otherwise, replace <i>y</i> by its own
                            right child, then replace <i>z</i> by <i>y</i>.
                        </li>
                    </ul>
                </li>

            </ol>

            <details>
                <summary class="sum3">
                Walk through of delete
                </summary>

                <figure>
                    <img src="graphics/BinTree1.png">
                    <figcaption>
                    </figcaption>
                </figure>
                <p>
                    Let's walk through deleting 8 in the tree above.
                </p>
                <ul>
                    <li>8 has two children, so we are in case 4.</li>
                    <li>The successor of 8 is 9.</li>
                    <li>9 is not the right child of 8.</li>
                    <li>So we replace 9 by 10.</li>
                    <li>Then we replace 8 by 9.</li>
                </ul>
                <p>
                The right half of tree 2 now looks like this:
                <br>
                <br>
                    <img 
                    src="graphics/BinTree2.png">
                </p>
                </details>
            </details>
        </details>

        <details>
            <summary class="sum1">
                12.4 Randomly built binary search trees
            </summary>
            <p>
                We insert the keys randomly. (We would have to have all keys at
                hand at the start, and then do a random shuffle on the set of
                keys.) The expected height of such a tree is O(lg n).
                <br>
                <br>
                This handles the situation where we believe we might get handed
                input that is already sorted, which would create a worst-case
                scenario.
            </p>
        </details>

        <details>
            <summary class="sum1">
                Run the Python code
            </summary>
 
            <p>
                In the console below, type or paste:
                <br />
            <code>
            !git clone
            https://gist.github.com/gcallah/f0d36f8c107e6c1e888d58aefcb3a5aa
            <br />
            cd f0d36f8c107e6c1e888d58aefcb3a5aa
            <br />
            from binary_search_trees import *
            <br />
            </code>
            </p>

<!--include python_anywhere.txt -->

        </details>

        <details>
            <summary class="sum1">
                Source Code
            </summary>
            <p>
<!--include BinarySearchTrees_langs.txt -->
            </p>
        </details>

        <details>
            <summary class="sum1">
                For Further Study
            </summary>
            <ul>
                <li><a
                        href="https://www.cs.usfca.edu/~galles/visualization/BST.html">
                        Binary search tree visualizer
                    </a>
                </li>
                <li><a
                        href="https://www.khanacademy.org/computer-programming/binary-search-tree-visualization/5765350200442880"> 
                        Khan Academy BST visualizer
                    </a>.
                </li>
            </ul>
        </details>
            
        <details>
            <summary class="sum1">
                Homework
            </summary>
            <ol>
                <li>For the first tree above, write the steps that will take place
                    when we insert 11.
                </li>
                <li>Write recursive versions of TREE-MINIMUM and
                    TREE-MAXIMUM.
                </li>
                <li>Compare the deletion of the node with key == 8
                    in Tree 2 that takes place following our
                    textbook's algorithm with what the first visualizer linked
                    to above actually does in this situation. Clearly, two
                    different binary trees result. What algorithm is being used
                    by the visualizer? (You could build different trees and see
                    what it does: this is called <b>reverse engineering</b>.)
                    If both algorithms always build valid BSTs, is there some
                    reason we should prefer one algorithm or the other?
                </li>
                <li>Keys are input to a binary search tree (BST) in the following order:
                        5, 10, 15, 20, 25.
                    Draw the resulting BST.
                </li>
                <li>Keys are input to a binary search tree (BST) in the following order:
                        50, 40, 35, 20, 15.
                    Draw the resulting BST.
                </li>
                <li>Keys are input in the following order:
                       10, 7, 15, 2, 25, 33, 1, 8, 9.
                    Draw the resulting BST.
                    Trace the process that occurs when inserting key 18.
                </li>
                <li>Keys are input in the following order:
                        6, 98, 4, 3, 5, 2, 1, 13, 106, 14, 18, 80.
                    Trace the process by which the successor of 80 will be
                    found.
                </li>

            </ol>
        </details>
    </body>
<!--include google_analytics.txt -->
</html>
