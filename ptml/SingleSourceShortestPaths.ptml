<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
            Design and Analyis of Algorithms: Single Source Shortest Paths
        </title>
    </head>

    <body>
<!--include menu.txt -->
        <h1>
            Design and Analyis of Algorithms: Single Source Shortest Paths
        </h1>

            <div style="text-align:center">
                <p>
                <img src="">
                </p>
            </div>

            <details>
                <summary class="sum1">
                24.0 Introduction
                </summary >


                <details>
                    <summary class="sum2">
                        Cycles
                    </summary>

                    <p>
                    A shortest path (if it exists)
                    can always be achieved cycle free:
                    </p>
                    <ul>
                        <li>
                            If there is a negative-weight cycle, no answer is
                            possible.
                        </li>
                        <li>
                            If there is a positive-weight cycle, it can be
                            eliminated to produce a shorter path.
                        </li>
                        <li>
                            A zero-weight cycle can be eliminated to produce
                            a path of the same cost.
                        </li>
                    </ul>
                </details>

                <details>
                    <summary class="sum2">
                        Relaxation
                    </summary>

                    <p>
                        Why the funny name for a move that "tightens up"
                        the distance to v?
                        <br />
                        It is historical, coming from "relaxing" the triangle
                        constraint on the distance between <i>u</i> and
                        <i>v</i>.
                    </p>

                    <p>
                    <code>
                        <pre>
                        Relax(u, v, w)
                            if v.d &gt; u.d + w(u, v)
                                v.d = u.d + w(u, v)
                                v.pred = u
                        </pre>
                    </code>
                    </p>

                </details>


            </details>

            <details>
                <summary class="sum1">
                    24.1 Bellman-Ford algorithm
                </summary>

                <details>
                    <summary class="sum2">
                        Bellman-Ford videos
                    </summary>

                    <figure>
                        <iframe width="560" height="315" src="https://www.youtube.com/embed/obWXjtg0L64" frameborder="0" allowfullscreen>
                        </iframe>
                        <figcaption>
                            Bellman-Ford in 5 minutes
                        </figcaption>
                    </figure>

                    <figure>
                        <iframe width="560" height="315" src="https://www.youtube.com/embed/rPsCRxTDwnQ" frameborder="0" allowfullscreen>
                        </iframe>
                        <figcaption>
                            Bellman-Ford with a negative weight cycle
                        </figcaption>
                    </figure>
                </details>

            </details>

            <details>
                <summary class="sum1">
                24.3 Dijkstra's Algorithm
                </summary >
                <p>
                    Discovered by Edsger Dijkstra.
                </p>

                <figure>
                    <img
                    src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif">
                    <figcaption>
                        Dijkstra's algorithm running
                    </figcaption>
                </figure>

                <p>
                <code>
                    <pre>
1  function Dijkstra(Graph, source):
2
3      create vertex set Q
4
5      for each vertex v in Graph:     // Initialization
6          dist[v] = INFINITY      // Unknown distance from source to v
7          prev[v] = UNDEFINED     // Previous node in optimal path from source
8          add v to Q            // All nodes initially in Q (unvisited nodes)
9
10      dist[source] = 0           // Distance from source to source
11      
12      while Q is not empty:
13          u = vertex in Q with min dist[u]  // Node with the least distance
14                                            // will be selected first
15          remove u from Q 
16          
17          for each neighbor v of u:           // where v is still in Q.
18              alt = dist[u] + length(u, v)
19              if alt &lt; dist[v]:      // A shorter path to v has been found
20                  dist[v] = alt 
21                  prev[v] = u 
22
23      return dist[], prev[] 
                    </pre>
                </code>
                </p>
            </details>

            <details>
                <summary class="sum1">
                Source Code
                </summary>
                <p>
                <a
                    href="https://github.com/gcallah/algorithms/blob/master/Python/">
                    Python
                </a>
                <br>
                </p>
            </details>

            <details>
                <summary class="sum1">
                For Further Study
                </summary>
                <ul>
                    <li>
                        <a
                        href="https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">
                            Shortest path visualizer
                        </a>
                    </li>
                </ul>
            </details>
            
    </body>
<!--include google_analytics.txt -->
</html>
